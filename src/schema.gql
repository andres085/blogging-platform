# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  id: ID!
  comment: String!
  likes: Float!
  dislikes: Float!
}

type Blog {
  id: ID!
  title: String!
  body: String!
  isActive: Boolean!
  isFeatured: Boolean!
  tags: [BlogTags!]!
  likes: Float!
  dislikes: Float!
  publishedAt: String!
  comments: [Comment!]!
}

"""These are the tags that a blog post can have."""
enum BlogTags {
  BACKEND
  FRONTEND
  WEB_DEVELOPMENT
  SOFTWARE_ENGINEERING
  DEVOPS
  BOOKS
  TUTORIALS
}

type User {
  id: ID!
  email: String!
  fullName: String!
  isActive: Boolean!
  roles: [String!]!
  bio: String
  avatar: String
  socialLinks: [String!]
  getUserBlogs(tag: BlogTags): [Blog!]!
  blogsCountByUser: Int!
}

type Flag {
  id: ID!
  entityType: EntityType!
  entityId: ID!
  userId: ID!
  reason: String!
  timeStamp: String!
  status: FlagStatus!
}

"""These are the types of entities to flag, a blog post or a comment."""
enum EntityType {
  BLOG
  COMMENT
}

"""These are the status of a flag that a blog post or a comment can have."""
enum FlagStatus {
  PENDING
  REVIEWED
  DISMISSED
}

type ParsedFlag {
  id: ID!
  entityType: String!
  entityId: String!
  userId: String!
  flaggedType: FlaggedUnion
  reason: String!
  timeStamp: String!
  status: String!
}

union FlaggedUnion = Blog | Comment

type Query {
  user(id: ID!): User!
  getAllBlogs(tag: BlogTags): [Blog!]!
  getBlog(id: ID!): Blog!
  findAllUsers: [User!]!
  adminFindAllBlogs(tag: String, isActive: Boolean): [Blog!]!
  findFlagsByEntityAndStatus(entityType: EntityType, status: FlagStatus): [ParsedFlag!]!
}

type Mutation {
  updateUserProfile(updateUserInput: UpdateUserInput!): User!
  blockAccount: User!
  createBlog(createBlogInput: CreateBlogInput!): Blog!
  updateBlog(updateBlogInput: UpdateBlogInput!): Blog!
  deactivateBlog(blogId: ID!): Blog!

  """This mutation is used to modify the like and dislikes for a comment"""
  modifyBlogLikes(updateBlogLikesInput: UpdateLikesInput!): Blog!
  createComment(createCommentInput: CreateCommentInput!): Comment!

  """This mutation is used to modify the like and dislikes for a comment"""
  modifyCommentLikes(updateCommentInput: UpdateLikesInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: String!): Comment!
  executeSeed: Boolean!
  modifyUserRole(promoteUserInput: PromoteUserInput!): User!
  deleteBlog(blogId: ID!): Blog!
  deleteUser(id: String!): User!
  deactivateUser(id: String!): User!
  changeFeatureBlog(featureBlog: FeatureBlogInput!): Blog!
  updateFlagStatus(updateFlagStatusArgs: UpdateFlagStatusArgs!): Flag!
  flagContent(createFlagInput: CreateFlagInput!): Flag!
}

input UpdateUserInput {
  bio: String
  avatar: String
  socialLinks: [String!]
  isActive: Boolean!
}

input CreateBlogInput {
  title: String!
  body: String!
  isActive: Boolean
  tags: [BlogTags!]!
}

input UpdateBlogInput {
  title: String
  body: String
  isActive: Boolean
  tags: [BlogTags!]
  id: ID!
}

input UpdateLikesInput {
  id: ID!
  addLike: Boolean
  addDislike: Boolean
}

input CreateCommentInput {
  blogId: ID!
  comment: String!
}

input UpdateCommentInput {
  id: ID!
  comment: String!
}

input PromoteUserInput {
  id: String!
  roles: [ValidRoles!]!
}

"""These are the valid roles for a user"""
enum ValidRoles {
  admin
  author
  reader
}

input FeatureBlogInput {
  id: String!
  isFeatured: Boolean!
}

input UpdateFlagStatusArgs {
  id: ID!
  status: FlagStatus!
}

input CreateFlagInput {
  entityType: EntityType!
  entityId: ID!
  reason: String!
}

type Subscription {
  commentAdded(blogId: String!): Comment!
}